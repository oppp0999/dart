다트는 구글이 자바스크립트를 대체하기 위해 2011년 개발한 웹 프로그래밍용 언어이지만 2018년이 될 때까지 배울 필요가 없는 프로그래밍 언어 중 하나로 여겨졌다. 하지만 다트는 새로운 프로그래밍 언어로, 나날이 큰 인기를 얻고 있습니다

현재 Dart는 다양한 VM과 컴파일러 지원을 통해 웹 프런트엔드부터 데스크톱, 서버, 모바일 애플리케이션까지 개발할 수 있다. Dart로 구축한 애플리케이션은 VM 위에서 동작합니다. Dart 프로젝트의 목적은 구조적이지만 유연하고, 프로그래머들에게 자연스럽고, 다양한 종류의 기기에서 돌아가게 하는 것입니다. 현재 구글의 크로스 플랫폼 앱 프레임워크인 Flutter가 이 언어를 사용하고 있습니다.

 

 

다트의 중요한 개념
- 변수에 할당할 수 있는 모든 것은 객체 이며 모든 객체는 클래스 의 인스턴스입니다.함수 및 null 도 모두 객체입니다. 모든 객체는 Object 클래스 에서 상속됩니다.

 

- Dart는 강력하게 타입적이지만. 유형이 예상되지 않는다고 할 때는 dynamic을 사용하여 타입에 lenient 하게 사용할 수도 있습니다.


 

- Dart는 List<int>(정수 목록) 또는 List<dynamic>(모든 유형의 개체 목록)과 같은 일반 유형을 지원합니다.


- Dart는 main() 함수 같은 탑 레벨 함수, 클래스 또는 객체에 연결된 함수, 함수 내의 함수 작성 등을 지원합니다.

 

- 마찬가지로 Dart는 최상위 변수 뿐만 아니라 클래스 또는 객체에 연결된 변수를 지원합니다. 인스턴스 변수는 필드 또는 속성이라고도 합니다.

 

- 자바와는 달리, 다트 키워드가 없습니다 public, protected하고 private. 식별자가 밑줄 (_)로 시작하면 라이브러리 전용입니다. 자세한 내용은 라이브러리 및 가시성을 참조하십시오.

 

- 식별자는 문자 나 밑줄 (_)로 시작하고 그 뒤에 문자와 숫자를 조합하여 사용할 수 있습니다.

 

- 다트에는 표현식 (런타임 값이 있음)과 명령문 (없음)이 있습니다. 예를 들어 조건식 condition ? expr1 : expr2의 값은 expr1또는 expr2입니다. 값이없는 if-else 문과 비교하십시오 . 명령문은 종종 하나 이상의 표현식을 포함하지만 표현식은 명령문을 직접 포함할 수 없습니다.


 

-다트 도구는 경고 와 오류 의 두 가지 문제를 보고 할 수 있습니다 . 경고는 코드가 작동하지 않을 수 있음을 나타내지 만 프로그램 실행을 방해하지는 않습니다. 오류는 컴파일 타임 또는 런타임 일 수 있습니다. 컴파일 타임 오류는 코드가 전혀 실행되지 못하게 합니다.런타임 오류로 인해 코드가 실행되는 동안 예외 가 발생합니다.

 

 

다트 언어의 키워드
keyword	description
abstract	추상클래스 정의 키워드
Implicit interfaces	
암시적 인터페이스

interface 키워드가 없음으로 일반 class로 정의된 내용을 암시적으로 구현하게 할 수 있습니다.

dynamic	특정 타입을 지정하지 않고 변수를  선언할 수있는 키워드입니다.
show	라이브러리의 일부만 선택적으로 가져올 수 있는 키워드입니다.
hide	라이브러리의 일부분을 제외하고 가져올수 있는 키워드입니다.
as	Typecase에 사용됩니다.
is	객체유형을 비교하고  bool을 반환합니다.
is!	객체유형을 비교하고  bool을 반환합니다.
static	
전역 변수 및 전역 메서드 등을 선언할 수 있습니다.

상수  선언은 camelCase를 따릅니다.

assert	
assert의 bool조건을 확인하여 false라면 에러를 발생시킵니다.

- flutter에서는 디버그 모드에서 assertion을 활성화합니다.

- dartdevc와 같은 개발 전용 도구는 기본적으로 assetion을 활성화합니다.

- 프로덕션 코드에서는 assertion이 무시됩니다.

enum	
열거형으로 고정된 상수의 값을 나타냅니다.

- 각 열거형 값에는 index getter가 있습니다.

- 모든 값의 목록을 얻으려면 values 상수를 사용할 수 있습니다.

in	List와 Set과 같은 반복가능한 Collection에서 이 키워드를 사용하여 반복할 수 있습니다.
super	extents를 통해 상속받은 클래스에서 부모클래스를 참조할때 사용합니다.
async	
비동기 함수를 선언할 때 사용합니다.

- Future <String> lookUpVersion() async =>'1.0.0';

- Future checkVersion() async {

    var version = await lookUpVersion();

  }

- async 함수는 시간이 오래 걸리는 작업을 수행할 수 있지만 해당 작업을 기다리지 않습니다. await를 만나면 실행하며 , await가 완료된 후에 실행을 재개하여 Future 객체를 반환합니다.

- async 함수의 에러 핸들은 try.catch 및 finally를 사용합니다.

await	비동기 함수의 결과를 기다리는데 사용합니다.
sync	
동기 Generator함수를 구현할 때 sync*로 선언하고,

yield를 이용하여 값을 전달합니다.

 

비동기 Generator함수를 구현할 때는 async* 를 사용하여 선언하고

yield를 이용하여 값을 전달합니다.

 

Iterable	동기 Generator
Stream	비동기 Generator 
switch_case	switch_case 문 키워드
factory 	팩토리 생성자
mixin	
- 믹스인은 다른 클래스 코드를 재사용하는 방법입니다.

- mixin으로 선언한 클래스는 다른 클래스에서 with 키워드를 이용하여 재사용할 수 있습니다.

- 일반적으로 abstract class 대신 사용합니다

- instantiated(인스턴트화) 할 수 없습니다

 

with

 mixin으로 선언한 클래스는 다른 클래스에서 with 키워드를 이용하여 재사용 할 수 있습니다.
on

- mixin으로 선언한 클래스에서 사용할 상위 클래스 on키워드를 사용하여 선언합니다

- mixin A on B {}이라고 선언된 클래스가 있다면

- A를  with으로 사용하는 클래스는 반드시 B를 구현하거나 상속받아야 합니다.

- on 키워드를 사용하려면 mixin 키워드를 사용해서 믹스인을 선언해야 합니다.

throw

이 키워드를 이용하여 예외를 던질 수 있습니다.

try, on , catch , finally

- try { } 블록에서 에러가  발생할 수도 있는 구문을  작성합니다.

- on [SomeException]{ }블럭에서 SomeException  타입의 에러를 지정하여 처리할 수 있습니다.

- catch(e){ }  블록에서는 여러 유형의  예외를 처리하거나  on에서 지정한 타입의 excption을 매개변수로 받을 수 있습니다.

- catch(e, s){}로 선언하면 e로  excption을 , s는 stacktrace입니다.

- catch나  on블록 안에서 rethrow;를 사용하면  하위 블록으로 에러를  다시 던질 수 있습니다.

- finally : 예외 발생 여부와 상관없이 일부 코드가 반드시 실행되도록  합니다.

final , const

final은 최종 변수로 값을 변경할 수 없습니다

const는 상수 변수입니다.

null

초기화되지 않은 변수의 초기 값은 null입니다. 숫자 형식의 변수(int)조차도 처음에는 null입니다. 숫자는 다트의 다른 모든 것과 마찬가지로 개체이기 때문입니다.

typedefs

타입 정의 또는 기능 형 별칭 , 함수 유형을 필드 및 반환 형식을 선언할 때 사용할 수 있는 이름을 제공합니다.

covariant

재정의 된 메서드에서 매개 변수는 슈퍼 클래스에있는 해당 매개 변수와 동일한 형식 또는 슈퍼 유형입니다.

- convariant를 사용하여 유형을 원래 매개 변수의 하위 유형으로 바꿀 수 있습니다.

 

- 일반적으로 수퍼 클래스 메서드에 적용하는 것이 가장 적합합니다.

- covariant키워드는 단일 매개 변수에 적용되며 또한 세터가 필드에서 지원됩니다.

 

 

 

다트 언어의 연산자
Operator	Description
expr++ , expr-- ,  ()  , []  ,   ?.	단항 접미사
-expr   ,!expr  ,  ~expr   , ++expr ,   --expr  ,await,  expr   	단항 접두사
* ,  /   , % , ~/	곱셈
+ ,  -	덧 뺄샘
<< ,  >> , >>>	시프트
&	비트 AND
^	비트 XOR
|	비트 OR
>=    >    <=    <    as    is    is!	부호 , 유형 
== , !=	부등호
&&	논리 AND
||	논리  OR
??	null의 경우
expr1 ? expr2 : expr3	가정  ?  true : false
=    *=    /=   +=   -=   &=   ^=	할당
